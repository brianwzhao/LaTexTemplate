=TEX
\documentclass{ffslides}
\ffpage{25}{\numexpr 16/9}
\usepackage{ProofPower}
\usepackage{framed}
\usepackage{amsmath}

\newcommand{\hdng}{CS113 Lab \#: }

\begin{document}
\obeyspaces

\input{../src/template.tex}

\twoCol{Prependix A:a Setup}{
=SML
PolyML.print_depth 64;
datatype SetElement = NoElem
 | Int of int
 | String of string
 | Set of set
 | Product of SetElement*SetElement
 and set = elems of SetElement list;
fun greaterElem(x:SetElement,y:SetElement) =
let
  fun isEqual(x:SetElement,y:SetElement) =
    not (greaterElem(x,y) orelse greaterElem(y,x));
in
  let
    fun greaterSet(elems(x::xs),elems(y::ys)) =
      if isEqual (x,y)
=TEX
}
{
=SML
        then greaterSet(elems xs,elems ys)
        else greaterElem(x,y)
    | greaterSet(elems[],_) = false
    | greaterSet(_,elems []) = true;
  in
   (case x of
      Int x => (
        case y of Int y => x>y
          | _=> false)
    | String x => (
        case y of Int y => true
          | String y => x>y
          | _ => false)
=TEX
}

\twoCol{Prependix A:b Setup}
{
=SML
    | Set x =>(
        case y of NoElem => false
          | Set y => greaterSet(x,y)
          | _ => true)
    | Product (a,b) =>(
        case y of NoElem => false
          | Product (c,d) =>
              (if isEqual(a,c)
                then greaterElem(b,d)
                else greaterElem(a,c))
          | _ => true)
    | _ => true)
  end
end;
=TEX
}
{
=SML
fun isEqual(x:SetElement,y:SetElement) =
  not (greaterElem(x,y) orelse greaterElem(y,x));

fun greaterSet(elems(x::xs),elems(y::ys)) =
  if isEqual (x,y)
    then greaterSet(elems xs,elems ys)
    else greaterElem(x,y)
 | greaterSet(elems[],_) = false
 | greaterSet(_,elems []) = true;
=TEX
}

\twoCol{Prependix A:c Setup}
{
=SML
fun setArray(elems x) = x;

fun merge(x:set, y:set) = case x of
   elems [] => y
 | elems (x::xs) => ( case y of
     elems [] => elems(x::xs)
   | elems(y::ys) => if greaterElem(x,y)
      then elems (y::(setArray
        (merge(elems (x::xs),elems ys))))
      else if greaterElem(y,x)
        then
          elems (x::(setArray
            (merge(elems xs,elems (y::ys)))))
        else elems (x::(setArray (merge(elems xs,elems ys))))
   );
=TEX
}
{
=SML
fun inOrder(x) = case x of elems [] => true
 | elems(x::xs::xss)=> greaterElem(xs,x)
    andalso (inOrder(elems(xs::xss)))
 | elems(x::[])=>true;

fun sort(elems(x::xs)) = (case x of
  Set x =>merge(elems[Set(sort x)],sort(elems xs))
 | _ => merge(elems [x],sort(elems xs)))
 | sort(elems[]) = elems [];
=TEX
}

\end{document}
